# PHP CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#

# Defines images and working directory.
defaults: &defaults
  docker:
    - image: cimg/php:8.1.4-browsers

    - image: circleci/mariadb:latest
      environment:
        MYSQL_ROOT_PASSWORD: password
        MYSQL_DATABASE: php
        MYSQL_USER: php
        MYSQL_PASSWORD: php

    - image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
      environment:
        - discovery.type=single-node
        - xpack.security.enabled=false
        - ES_JAVA_OPTS: -Xms500m -Xmx500m

# Defines the cache restore mechanism for composer dependencies.
restore_cache:
  &restore_cache # We use the composer.lock as a way to determine if we can cache our build.
  keys:
    - composer-v3-{{ checksum "composer.lock" }}
    # fallback to using the latest cache if no exact match is found
    - composer-v2-

# Defines the cache saving mechanism for composer dependencies.
save_cache: &save_cache
  key: composer-v3-{{ checksum "composer.lock" }}
  paths:
    - vendor

# Defines the cache restore mechanism for node dependencies.
restore_node_cache: &restore_node_cache
  keys:
    - node-v1-{{ checksum "package.json" }}
    - node-v1-

# Defines the cache saving mechanism for node dependencies.
save_node_cache: &save_node_cache
  key: node-v1-{{ checksum "package.json" }}
  paths:
    - node_modules
    - /home/circleci/.npm

commands:
  create_harvester_env_file:
    description: "Creates the harvester env file pushing creds in from CircleCI env vars"
    parameters:
      environment:
        type: string
    steps:
      - run: rm -f harvester/.env
      - run: touch harvester/.env
      - run: echo -e "AB_CLIENT_ID=$AB_CLIENT_ID" >> harvester/.env
      - run: echo -e "AB_CLIENT_SECRET=$AB_CLIENT_SECRET" >> harvester/.env
      - run: echo -e "AB_USERNAME=$AB_USERNAME" >> harvester/.env
      - run: echo -e "AB_PASSWORD=$AB_PASSWORD" >> harvester/.env
      - run: echo -e "TRINT_API_KEY=$TRINT_API_KEY\n" >> harvester/.env
      - run: echo -e "ELASTICSEARCH_HOST=$ELASTICSEARCH_HOST\n" >> harvester/.env
      - run: echo -e "ELASTICSEARCH_API_KEY=$ELASTICSEARCH_API_KEY\n" >> harvester/.env
      - run: echo -e "SLACK_WEBHOOK=$SLACK_WEBHOOK\n" >> harvester/.env

# Jobs
build_and_test: &build_and_test
  <<: *defaults
  steps:
    - run: sudo apt-get update

    - checkout

    - run:
        name: Wait for elasticsearch
        command: dockerize -wait http://localhost:9200 -timeout 3m

    - run:
        name: Set up Elasticsearch
        command: |
          curl -s -X PUT -H "Content-Type: application/json" "localhost:9200/_index_template/template_video" -d @./elasticsearch/templates/video_.json
          curl -s -X PUT "localhost:9200/video_testing?pretty"
          curl -s -H "Content-Type: application/x-ndjson" -XPOST "localhost:9200/_bulk" --data-binary @./utils/sample-data/sample-elastic.json

    - run: rm .env.testing
    - run: mv .circleci/.env.testing .env.testing

    # Install Composer dependencies.
    - restore_cache: *restore_cache
    - run: composer install
    - save_cache: *save_cache

    # Install Node dependencies.
    - restore_cache: *restore_node_cache
    - run: npm install
    - save_cache: *save_node_cache
    - run: npm run production

    # prepare database
    - run: php artisan key:generate --env=testing
    - run: php artisan config:clear
    - run: php artisan migrate --env=testing --database=mysql_testing --force

    # Run tests
    - run: ./vendor/bin/phpunit tests

    # Run linting
    - run: ./vendor/bin/phpcs

    - persist_to_workspace:
        root: /home/circleci/project
        paths:
          - vendor/
          - public/css/
          - public/js/

deploy: &deploy
  docker:
    - image: cimg/php:8.1.4-browsers
  steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - "a2:22:da:24:fd:c3:76:8d:80:de:ae:af:a3:00:c3:3e"
    - attach_workspace:
        at: /home/circleci/project
    - run:
        name: Install Deployer
        command: |
          curl -LO https://deployer.org/deployer.phar
          sudo mv deployer.phar /usr/local/bin/dep
          sudo chmod +x /usr/local/bin/dep
    - run:
        name: Install deploy dependency rsync
        command: sudo apt update && sudo apt-get install rsync
    - run: composer install --optimize-autoloader --no-dev
    - aws-sg-white-list-circleci-ip/add:
        port: 22
        tag-key: group
        tag-value: bastion
    - create_harvester_env_file:
        environment: $CI_HOST_URL
    - run: ssh-keyscan -H $(echo "$CI_PROD_DEPLOY_URL" | sed 's/.*@\(.*\):.*/\1/') >> ~/.ssh/known_hosts
    - run: ./vendor/deployer/deployer/deployer.phar deploy live
    - run: |
        ssh deploy@$CI_PROD_DEPLOY_URL \<< EOF
          cd /var/www/$CI_PROD_DEPLOY_URL/current/harvester
          mkdir -p logs data
          /home/deploy/.local/bin/poetry install
          sudo systemctl reload php8.1-fpm.service
        EOF
    - aws-sg-white-list-circleci-ip/del:
        port: 22
        tag-key: group
        tag-value: bastion

deploy_stage: &deploy_stage
  docker:
    - image: cimg/php:8.1.4-browsers
  steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - "a2:22:da:24:fd:c3:76:8d:80:de:ae:af:a3:00:c3:3e"
    - attach_workspace:
        at: /home/circleci/project
    - run:
        name: Install Deployer
        command: |
          curl -LO https://deployer.org/deployer.phar
          sudo mv deployer.phar /usr/local/bin/dep
          sudo chmod +x /usr/local/bin/dep
    - run:
        name: Install deploy dependency rsync
        command: sudo apt update && sudo apt-get install rsync
    - run: composer install --optimize-autoloader --no-dev
    - aws-sg-white-list-circleci-ip/add:
        port: 22
        tag-key: group
        tag-value: bastion
    - create_harvester_env_file:
        environment: $CI_STAGE_HOST_URL
    - run: ssh-keyscan -H $(echo "$CI_STAGE_HOST_URL" | sed 's/.*@\(.*\):.*/\1/') >> ~/.ssh/known_hosts
    - run: ./vendor/deployer/deployer/deployer.phar deploy stage
    - run: |
        ssh deploy@$CI_STAGE_HOST_URL \<< EOF
          cd /var/www/$CI_STAGE_HOST_URL/current/harvester
          mkdir -p logs data
          /home/deploy/.local/bin/poetry install
          sudo systemctl reload php8.1-fpm.service
        EOF
    - aws-sg-white-list-circleci-ip/del:
        port: 22
        tag-key: group
        tag-value: bastion

deploy_dev: &deploy_dev
  docker:
    - image: cimg/php:8.1.4-browsers
  steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - "a2:22:da:24:fd:c3:76:8d:80:de:ae:af:a3:00:c3:3e"
    - attach_workspace:
        at: /home/circleci/project
    - run:
        name: Install Deployer
        command: |
          curl -LO https://deployer.org/deployer.phar
          sudo mv deployer.phar /usr/local/bin/dep
          sudo chmod +x /usr/local/bin/dep
    - run:
        name: Install deploy dependency rsync
        command: sudo apt update && sudo apt-get install rsync
    - run: composer install --optimize-autoloader --no-dev
    - aws-sg-white-list-circleci-ip/add:
        port: 22
        tag-key: group
        tag-value: bastion
    - create_harvester_env_file:
        environment: $CI_DEV_HOST_URL
    - run: ssh-keyscan -H $(echo "$CI_DEV_HOST_URL" | sed 's/.*@\(.*\):.*/\1/') >> ~/.ssh/known_hosts
    - run: ./vendor/deployer/deployer/deployer.phar deploy dev
    - run: |
        ssh deploy@$CI_DEV_HOST_URL \<< EOF
          cd /var/www/$CI_DEV_HOST_URL/current/harvester
          mkdir -p logs data
          /home/deploy/.local/bin/poetry install
          sudo systemctl reload php8.1-fpm.service
        EOF
    - aws-sg-white-list-circleci-ip/del:
        port: 22
        tag-key: group
        tag-value: bastion

# Declare all of the jobs we should run.
version: 2.1
orbs:
  aws-sg-white-list-circleci-ip: inokappa/aws-sg-white-list-circleci-ip@0.0.3

jobs:
  build_and_test:
    <<: *build_and_test
  deploy_dev:
    <<: *deploy_dev
  deploy_stage:
    <<: *deploy_stage
  deploy:
    <<: *deploy

workflows:
  build_and_test:
    jobs:
      - build_and_test:
          filters:
            tags:
              only: /.*/
      - deploy_dev:
          requires:
            - build_and_test
          filters:
            tags:
              only: /^dev-.*/
            branches:
              ignore: /.*/
      - deploy_stage:
          requires:
            - build_and_test
          filters:
            branches:
              only: develop
      - deploy:
          requires:
            - build_and_test
          filters:
            branches:
              only: master
